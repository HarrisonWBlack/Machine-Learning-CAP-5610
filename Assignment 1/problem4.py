# -*- coding: utf-8 -*-
"""problem4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8BkXzAIgiaJHuQPSNvIFe7ZXB3la0vY
"""

# Harrison Black
# HA435377
# CAP 5610
# UCF Spring 2019

# Problem 4
# Reimplement the network from Problem 3 entirely in Keras.

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

mnist = tf.keras.datasets.mnist
(training_imgs, training_labels), (test_imgs, test_labels) = mnist.load_data()

training_imgs = tf.keras.utils.normalize(training_imgs, axis=1)
test_imgs = tf.keras.utils.normalize(test_imgs, axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(training_imgs, training_labels, epochs=3)
loss_value, accuracy_value = model.evaluate(test_imgs, test_labels)


# Seed and create random number to test a random image
np.random.seed()
test_index = np.random.randint(0, len(test_imgs), size=None)

plt.imshow(test_imgs[test_index], cmap = plt.cm.binary)
plt.show()

predections = model.predict([test_imgs])

print("Actual number: ", test_labels[test_index])
print("Predicted number: ", np.argmax(predections[test_index]))
print("Loss value: ", loss_value, "\nModel accuracy: ", accuracy_value)